Number Representation
1. Convert 1590 to binary: 0b11000110110
2. Convert 0b101110110 to decimal: 256+64+32+16+4+2 = 374
3. Convert 0b1100 0000 0001 1010 0001 0101 1011 1010 1101 to hexadecimal: 0xC01A15BAD
4. Convert 0b100 001 101 101 to octal: 0o4155
5. Convert 0o31337 to binary: 0b011 001 011 011 111
6. Convert 0xBADF00D to binary and then to octal: 
0b1011 1010 1101 1111 0000 0000 1101
0b 001 011 101 011 011 111 000 000 001 101
0o1353370015
7. Convert 0o6157 to binary and then to decimal: 
0b110 001 101 111
Decimal: 2048+1024+64+32+8+4+2+1 = 3183
8. Convert 497 to binary. Then, use two’s complement to convert 497 to -497 in binary:
0b 0001 1111 0001
0b 1110 0000 1111
9. Convert 900.79 to binary up to the 1/16ths spot:
0b1110000100.11001
10. Count from 0 through 10 in ternary (base 3):
0	1	2	 3	 4	 5	  6    7	 8	   9      10
1	3	9	27	81	243  729  2187  6561  19683  59049

Circuit Design
1.Let A and B be two 2-bit binary numbers (i.e., A1 A0 and B1 B0). Write out a truth table for A less than or equal to B:
A1 A0 B1 B0  A <= B
0  0  0  0    1 
0  0  0  1    1  
0  0  1  0    1
0  0  1  1    1
---------------
0  1  0  0    0
0  1  0  1    1
0  1  1  0    1
0  1  1  1    1
---------------
1  0  0  0    0
1  0  0  1    0
1  0  1  0    1
1  0  1  1    1
---------------
1  1  0  0    0
1  1  0  1    0
1  1  1  0    0 
1  1  1  1    1

Write out the equivalent logic expression for the previous answer:
(a1'*a0') +
((a1'*a0) * (b1+b0)) +
(a1+a0') * (b1) +
(a1+a0) * (b1+b0)

Write out the truth table for the minority circuit (it’s true when the minority of X, Y, and Z are true):
X  Y  Z  Minority
0  0  0     1   
0  0  1     1
0  1  0     1
0  1  1     0
------- 
1  0  0     1
1  0  1     0
1  1  0     0
1  1  1     0
-------


Write out the equivalent logic expression for the previous answer:
x' * (y * z)' +
x * (y + z)'


Boolean algebra
1. Show c + (b * c)' = 1: 
c + (b * c) = c + b' + c' = 1 DeMorgan's
1 + b' = 1 Complement, Idenity

2. Show (a + c) * (a * d + a * d') + a * c + c = a + c
(a + c) * (a (d + d')) + a * c + c = a + c Distributive
(a + c) * (a * 1) + a * c + c = a + c Complement
(a + c) * a + a * c + c = a + c Idempotence
(a + c) * a + c + c * a = a + c Commutativity
(a + c) * a + c = a + c Aborb
a + c = a + c Absorb/ Commutativity

3. Simplify a' * (a + b) + (b + a * a) * (a + b')
a' * (a + b) + (a * a + b) * (a + b') Commutative
a' * (a + b) + a * (a + b') Absorption
a' * (a + b) + a * (a + b') Idempotence
a' * a + a' * b + a * (a + b') Distributive
0 + a' * b + a * (a + b') Complement
a' * b + a Absorption
b * a' + a Commutative
b * 1 Complement
b


4. Show (a' * b') + (a' * b) + (a * b') = (a * b)'
(a' * b') + (a' * b) + (a * b') = a' + b' DeMorgan's
a' * a' * a + b' * b' * b = a' + b' Distributive
a' + b' = a' + b'

Dual form
1. (a + b)' + c * a' + 1
(a + b)' + (c * a') + 1 Put parentheses around subexpressions
(a + b)' + (c * a') + 0 Swap 1 with 0
(a * b)' * (c + a') * 0 Swap AND with OR


2. 1 + 1 * 0'
1 + (1 * 0') Put parentheses around subexpressions
0 + (0 * 1') Swap 1 with 0
0 * (0 + 1') Swap AND with OR
